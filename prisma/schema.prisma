generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model task {
  task_id            Int            @id @default(autoincrement())
  title              String         @db.VarChar(164)
  description        String?        @db.VarChar(256)
  creator_id         Int
  responsible_id     Int?
  date_of_creation   DateTime?      @db.DateTime(0)
  date_of_completion DateTime?      @db.DateTime(0)
  parent_id          Int?
  status_task_id     Int?
  team_owned_id      Int?
  team               team?          @relation(fields: [team_owned_id], references: [team_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_TeamOwnedId_To_teamId")
  creator_title      user           @relation(fields: [creator_id], references: [user_id], onDelete: Cascade, onUpdate: Restrict, map: "task_ibfk_1")
  responsible_title  user?          @relation("task_responsible_idTouser", fields: [responsible_id], references: [user_id], onUpdate: NoAction, map: "fk_responsibleId_To_userId")
  task_to_plan       task_to_plan[]

  @@unique([parent_id, status_task_id], map: "duplicate_task_parent_id")
  @@index([creator_id], map: "fk_creatorId_To_userId_idx")
  @@index([creator_id, responsible_id], map: "fk_creatorId_userId_idx")
  @@index([responsible_id], map: "fk_responsibleId_To_userId_idx")
  @@index([team_owned_id], map: "fk_TeamOwnedId_To_teamId_idx")
}

model user {
  user_id                        Int            @id @default(autoincrement())
  name                           String         @db.VarChar(64)
  date_of_creation               DateTime       @db.DateTime(0)
  last_name                      String?        @db.VarChar(64)
  password                       String         @db.VarChar(256)
  email                          String         @unique(map: "email_UNIQUE") @db.VarChar(64)
  avatar                         String?        @db.VarChar(124)
  tarif_id                       Int?
  chat_room                      chat_room[]
  message                        message[]
  plan                           plan[]
  task                           task[]
  task_task_responsible_idTouser task[]         @relation("task_responsible_idTouser")
  team                           team[]
  token                          token[]
  user_to_team                   user_to_team[]
}

model status_task {
  status_task_id Int    @id
  name_status    String @db.VarChar(124)
}

model tarif {
  tarif_id Int    @id @default(autoincrement())
  name     String @db.VarChar(64)
  price    Int
}

model user_role {
  role_id   Int     @id @default(autoincrement())
  name_role String? @db.VarChar(64)
}

model team {
  team_id          Int            @id @default(autoincrement())
  title            String         @db.VarChar(124)
  date_of_creation DateTime?      @db.DateTime(0)
  creator_id       Int
  type_id          Int?
  task             task[]
  user             user           @relation(fields: [creator_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_creator_id_user_id")
  user_to_team     user_to_team[]

  @@index([creator_id], map: "fk_creator_id_user_id_idx")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model user_to_team {
  user_to_team_id Int  @id @default(autoincrement())
  team_id         Int
  user_id         Int
  team            team @relation(fields: [team_id], references: [team_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_team_team_id")
  user            user @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_user_id")

  @@unique([team_id, user_id], map: "duplicate_user_to_team")
  @@index([team_id], map: "fk_team_team_id_idx")
  @@index([user_id], map: "fk_user_user_id_idx")
}

model token {
  token_id      Int    @id @default(autoincrement())
  user_id       Int
  refresh_token String @unique(map: "refresh_token_UNIQUE") @db.VarChar(512)
  user          user   @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_token_user_user_id")

  @@index([user_id], map: "fk_token_user_user_id_idx")
}

model type_team {
  type_team_id Int    @id
  name_type    String @db.VarChar(45)
}

model plan {
  plan_id          Int            @id @default(autoincrement())
  title            String         @db.VarChar(256)
  description      String         @db.VarChar(256)
  date_of_creation DateTime       @db.DateTime(0)
  creator_id       Int
  user             user           @relation(fields: [creator_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_creatorId_plan")
  task_to_plan     task_to_plan[]

  @@index([creator_id], map: "fk_creatorId_plan_idx")
}

model task_to_plan {
  id      Int  @id @default(autoincrement())
  task_id Int
  plan_id Int
  plan    plan @relation(fields: [plan_id], references: [plan_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_plan_task_to_plan")
  task    task @relation(fields: [task_id], references: [task_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_task_task_to_plan")

  @@unique([task_id, plan_id], map: "duplicate_user_to_team")
  @@index([plan_id], map: "fk_plan_task_to_plan_idx")
  @@index([task_id], map: "fk_task_task_to_plan_idx")
}

model chat_room {
  chat_room_id         String       @id @unique(map: "chat_id_UNIQUE") @db.VarChar(256)
  name_room            String       @db.VarChar(256)
  creator_chat_room_id Int
  date_of_creation     DateTime     @db.DateTime(0)
  user                 user         @relation(fields: [creator_chat_room_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "creator_chat_room_to_user_id")
  message              message[]
  party_room           party_room[]

  @@index([creator_chat_room_id], map: "creater_chaat_room_to_user_id_idx")
}

model message {
  messages_id        Int       @id @default(autoincrement())
  chat_room_id       String    @db.VarChar(256)
  creator_message_id Int
  content            String    @db.VarChar(512)
  date_of_creation   DateTime  @db.DateTime(0)
  chat_room          chat_room @relation(fields: [chat_room_id], references: [chat_room_id], onDelete: NoAction, onUpdate: NoAction, map: "chat_room_id_to_chat_room_id")
  user               user      @relation(fields: [creator_message_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "creator_message_id_to_user_id")

  @@index([creator_message_id], map: "creator_message_id_to_user_id_idx")
  @@index([chat_room_id], map: "chat_room_id_to_chat_room_id_idx")
}

model party_room {
  party_room_id Int       @id @default(autoincrement())
  chat_room_id  String    @db.VarChar(256)
  user_id       Int
  chat_room     chat_room @relation(fields: [chat_room_id], references: [chat_room_id], onDelete: NoAction, onUpdate: NoAction, map: "chat_room_id_to_char_room_id")

  @@index([chat_room_id], map: "chat_room_id_to_char_room_id_idx")
}
